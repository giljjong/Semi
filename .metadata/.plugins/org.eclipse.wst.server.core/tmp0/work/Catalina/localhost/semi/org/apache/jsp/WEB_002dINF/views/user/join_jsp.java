/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-11-30 09:19:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Semi/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SemiProject/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1666750748295L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("	$(function(){\r\n");
      out.write("		fn_idCheck();\r\n");
      out.write("		fn_pwCheck();\r\n");
      out.write("		fn_pwCheckAgain();\r\n");
      out.write("		fn_nameCheck();\r\n");
      out.write("		fn_mobileCheck();\r\n");
      out.write("		fn_birthyear();\r\n");
      out.write("		fn_birthmonth();\r\n");
      out.write("		fn_birthdate();\r\n");
      out.write("		fn_emailCheck();\r\n");
      out.write("		fn_join();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	var idPass = false;\r\n");
      out.write("	var pwPass = false;\r\n");
      out.write("	var rePwPass = false;\r\n");
      out.write("	var namePass = false;\r\n");
      out.write("	var mobilePass = false;\r\n");
      out.write("	var authCodePass = false;\r\n");
      out.write("	\r\n");
      out.write("	// 1. 아이디 중복체크 & 정규식\r\n");
      out.write("	function fn_idCheck(){\r\n");
      out.write("		\r\n");
      out.write("		$('#id').keyup(function(){\r\n");
      out.write("			\r\n");
      out.write("			let idValue = $(this).val();\r\n");
      out.write("			\r\n");
      out.write("			// 정규식(4~20자, 소문자+숫자+특수문자(-,_)조합, 첫 글자는 특수문자 제외(-,_))\r\n");
      out.write("			let regId = /^[0-9a-z][0-9a-z-_]{3,19}$/;\r\n");
      out.write("			\r\n");
      out.write("			if(regId.test(idValue) == false){\r\n");
      out.write("				$('#msg_id').text('4~20자의 소문자, 숫자, 특수문자(-,_)를 조합해야 합니다.');\r\n");
      out.write("				idPass = false;\r\n");
      out.write("				return;  \r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 아이디 중복체크\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				/* 요청 */\r\n");
      out.write("				type: 'get',\r\n");
      out.write("				url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/checkReduceId',\r\n");
      out.write("				data: 'id=' + idValue,\r\n");
      out.write("				/* 응답 */\r\n");
      out.write("				dataType: 'json',\r\n");
      out.write("				success: function(resData){  \r\n");
      out.write("					if(resData.isUser || resData.isRetireUser){\r\n");
      out.write("						$('#msg_id').text('이미 사용중이거나 탈퇴한 아이디입니다.');\r\n");
      out.write("						idPass = false;\r\n");
      out.write("					} else {\r\n");
      out.write("						$('#msg_id').text('사용 가능한 아이디입니다.');\r\n");
      out.write("						idPass = true;\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});  \r\n");
      out.write("			\r\n");
      out.write("		});  \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 2. 비밀번호\r\n");
      out.write("	function fn_pwCheck(){\r\n");
      out.write("		\r\n");
      out.write("		$('#pw').keyup(function(){\r\n");
      out.write("			\r\n");
      out.write("			let pwValue = $(this).val();\r\n");
      out.write("			\r\n");
      out.write("			// 정규식(8~20자, 소문자+대문자+숫자+특수문자8종(!@#$%^&*) 3개 이상 조합)\r\n");
      out.write("			let regPw = /^[0-9a-zA-Z!@#$%^&*]{8,20}$/;\r\n");
      out.write("			\r\n");
      out.write("			// 3개 이상 조합 확인\r\n");
      out.write("			let validatePw = /[0-9]/.test(pwValue)        // 숫자가 있으면 true, 없으면 false\r\n");
      out.write("			               + /[a-z]/.test(pwValue)        // 소문자가 있으면 true, 없으면 false\r\n");
      out.write("			               + /[A-Z]/.test(pwValue)        // 대문자가 있으면 true, 없으면 false\r\n");
      out.write("			               + /[!@#$%^&*]/.test(pwValue);  // 특수문자8종이 있으면 true, 없으면 false\r\n");
      out.write("			\r\n");
      out.write("			// 정규식 및 3개 이상 조합 검사\r\n");
      out.write("			if(regPw.test(pwValue) == false || validatePw < 3){\r\n");
      out.write("				$('#msg_pw').text('8~20자의 소문자, 대문자, 숫자, 특수문자(!@#$%^&*)를 3개 이상 조합해야 합니다.');\r\n");
      out.write("				pwPass = false;\r\n");
      out.write("			} else {\r\n");
      out.write("				$('#msg_pw').text('사용 가능한 비밀번호입니다.');\r\n");
      out.write("				pwPass = true;\r\n");
      out.write("			}\r\n");
      out.write("			               \r\n");
      out.write("		});  \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 3. 비밀번호 확인\r\n");
      out.write("	function fn_pwCheckAgain(){\r\n");
      out.write("		\r\n");
      out.write("		$('#re_pw').keyup(function(){\r\n");
      out.write("			\r\n");
      out.write("			let rePwValue = $(this).val();\r\n");
      out.write("			\r\n");
      out.write("			if(rePwValue != '' && rePwValue != $('#pw').val()){\r\n");
      out.write("				$('#msg_re_pw').text('비밀번호를 확인하세요.');\r\n");
      out.write("				rePwPass = false;\r\n");
      out.write("			} else {\r\n");
      out.write("				$('#msg_re_pw').text('');\r\n");
      out.write("				rePwPass = true;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});  \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 4. 이름\r\n");
      out.write("	function fn_nameCheck(){\r\n");
      out.write("		\r\n");
      out.write("		$('#name').keyup(function(){\r\n");
      out.write("			\r\n");
      out.write("			let nameValue = $(this).val();\r\n");
      out.write("			\r\n");
      out.write("			namePass = (nameValue != '');\r\n");
      out.write("			\r\n");
      out.write("		}); \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 5. 휴대전화\r\n");
      out.write("	function fn_mobileCheck(){\r\n");
      out.write("		\r\n");
      out.write("		$('#mobile').keyup(function(){\r\n");
      out.write("			\r\n");
      out.write("			let mobileValue = $(this).val();\r\n");
      out.write("			\r\n");
      out.write("			// 휴대전화 정규식(010으로 시작, 하이픈 없이 전체 10~11자)\r\n");
      out.write("			let regMobile = /^010[0-9]{7,8}$/;\r\n");
      out.write("			\r\n");
      out.write("			if(regMobile.test(mobileValue) == false){\r\n");
      out.write("				$('#msg_mobile').text('휴대전화를 확인하세요.');\r\n");
      out.write("				mobilePass = false;\r\n");
      out.write("			} else {\r\n");
      out.write("				$('#msg_mobile').text('');\r\n");
      out.write("				mobilePass = true;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}); \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 6. 생년월일(년도)\r\n");
      out.write("	function fn_birthyear(){\r\n");
      out.write("		let year = new Date().getFullYear();\r\n");
      out.write("		let strYear = '<option value=\"\">년도</option>';\r\n");
      out.write("		for(let y = year - 100; y <= year + 1; y++){\r\n");
      out.write("			strYear += '<option value=\"' + y + '\">' + y + '</option>';\r\n");
      out.write("		}\r\n");
      out.write("		$('#birthyear').append(strYear);\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 7. 생년월일(월)\r\n");
      out.write("	function fn_birthmonth(){\r\n");
      out.write("		let strMonth = '<option value=\"\">월</option>';\r\n");
      out.write("		for(let m = 1; m <= 12; m++){\r\n");
      out.write("			if(m < 10){\r\n");
      out.write("				strMonth += '<option value=\"0' + m + '\">' + m + '월</option>';\r\n");
      out.write("			} else {\r\n");
      out.write("				strMonth += '<option value=\"' + m + '\">' + m + '월</option>';\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		$('#birthmonth').append(strMonth);\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 8. 생년월일(일)\r\n");
      out.write("	function fn_birthdate(){\r\n");
      out.write("		\r\n");
      out.write("		$('#birthdate').append('<option value=\"\">일</option>');\r\n");
      out.write("		\r\n");
      out.write("		$('#birthmonth').change(function(){\r\n");
      out.write("			\r\n");
      out.write("			$('#birthdate').empty();\r\n");
      out.write("			$('#birthdate').append('<option value=\"\">일</option>');\r\n");
      out.write("			let endDay = 0;\r\n");
      out.write("			let strDay = '';\r\n");
      out.write("			switch($(this).val()){\r\n");
      out.write("			case '02':\r\n");
      out.write("				endDay = 29; break;\r\n");
      out.write("			case '04':\r\n");
      out.write("			case '06':\r\n");
      out.write("			case '09':\r\n");
      out.write("			case '11':\r\n");
      out.write("				endDay = 30; break;\r\n");
      out.write("			default:\r\n");
      out.write("				endDay = 31; break;\r\n");
      out.write("			}\r\n");
      out.write("			for(let d = 1; d <= endDay; d++){\r\n");
      out.write("				if(d < 10){\r\n");
      out.write("					strDay += '<option value=\"0' + d + '\">' + d + '일</option>';\r\n");
      out.write("				} else {\r\n");
      out.write("					strDay += '<option value=\"' + d + '\">' + d + '일</option>';\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			$('#birthdate').append(strDay);\r\n");
      out.write("			\r\n");
      out.write("		}); \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 9. 이메일\r\n");
      out.write("	function fn_emailCheck(){\r\n");
      out.write("		\r\n");
      out.write("		$('#btn_getAuthCode').click(function(){\r\n");
      out.write("			\r\n");
      out.write("			$('#authCode').prop('readonly', false);\r\n");
      out.write("			\r\n");
      out.write("			new Promise(function(resolve, reject) {\r\n");
      out.write("		\r\n");
      out.write("				let regEmail = /^[a-zA-Z0-9-_]+@[a-zA-Z0-9]+(\\.[a-zA-Z]{2,}){1,2}$/;\r\n");
      out.write("				\r\n");
      out.write("				let emailValue = $('#email').val();\r\n");
      out.write("				\r\n");
      out.write("				if(regEmail.test(emailValue) == false){\r\n");
      out.write("					reject(1);  \r\n");
      out.write("					authCodePass = false;\r\n");
      out.write("					return;     \r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				// 이메일 중복 체크\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					/* 요청 */\r\n");
      out.write("					type: 'get',\r\n");
      out.write("					url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/checkReduceEmail',\r\n");
      out.write("					data: 'email=' + $('#email').val(),\r\n");
      out.write("					/* 응답 */\r\n");
      out.write("					dataType: 'json',\r\n");
      out.write("					success: function(resData){\r\n");
      out.write("						if(resData.isUser){\r\n");
      out.write("							reject(2);   \r\n");
      out.write("						} else {\r\n");
      out.write("							resolve();   \r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				});  \r\n");
      out.write("				\r\n");
      out.write("			}).then(function(){\r\n");
      out.write("				\r\n");
      out.write("				// 인증번호 보내는 ajax\r\n");
      out.write("				$.ajax({\r\n");
      out.write("					/* 요청 */\r\n");
      out.write("					type: 'get',\r\n");
      out.write("					url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/sendAuthCode',\r\n");
      out.write("					data: 'email=' + $('#email').val(),\r\n");
      out.write("					/* 응답 */\r\n");
      out.write("					dataType: 'json',\r\n");
      out.write("					success: function(resData){\r\n");
      out.write("						alert('인증코드를 발송했습니다. 이메일을 확인하세요.');\r\n");
      out.write("						$('#btn_verifyAuthCode').click(function(){\r\n");
      out.write("							if(resData.authCode == $('#authCode').val()){\r\n");
      out.write("								alert('인증되었습니다.');\r\n");
      out.write("								authCodePass = true;\r\n");
      out.write("							} else {\r\n");
      out.write("								alert('인증에 실패했습니다.');\r\n");
      out.write("								authCodePass = false;\r\n");
      out.write("							}\r\n");
      out.write("						});\r\n");
      out.write("					},\r\n");
      out.write("					error: function(jqXHR){\r\n");
      out.write("						alert('인증번호 발송이 실패했습니다.');\r\n");
      out.write("						authCodePass = false;\r\n");
      out.write("					}\r\n");
      out.write("				}); \r\n");
      out.write("				\r\n");
      out.write("			}).catch(function(code){  \r\n");
      out.write("				switch(code){\r\n");
      out.write("				case 1:\r\n");
      out.write("					$('#msg_email').text('이메일 형식이 올바르지 않습니다.');\r\n");
      out.write("					break;\r\n");
      out.write("				case 2:\r\n");
      out.write("					$('#msg_email').text('이미 사용중인 이메일입니다.');\r\n");
      out.write("					break;\r\n");
      out.write("				}\r\n");
      out.write("			\r\n");
      out.write("				authCodePass = false;\r\n");
      out.write("			\r\n");
      out.write("				$('#authCode').prop('readonly', true);\r\n");
      out.write("				\r\n");
      out.write("			});  \r\n");
      out.write("			\r\n");
      out.write("		});  \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("	\r\n");
      out.write("	// 10. 서브밋 (회원가입)\r\n");
      out.write("	function fn_join(){\r\n");
      out.write("		\r\n");
      out.write("		$('#frm_join').submit(function(event){\r\n");
      out.write("			\r\n");
      out.write("			if(idPass == false){\r\n");
      out.write("				alert('아이디를 확인하세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(pwPass == false || rePwPass == false){\r\n");
      out.write("				alert('비밀번호를 확인하세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(namePass == false){\r\n");
      out.write("				alert('이름을 확인하세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(mobilePass == false){\r\n");
      out.write("				alert('휴대전화번호를 확인하세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if($('#birthyear').val() == '' || $('#birthmonth').val() == '' || $('#birthdate').val() == ''){\r\n");
      out.write("				alert('생년월일을 확인하세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			} else if(authCodePass == false){\r\n");
      out.write("				alert('이메일 인증을 받으세요.');\r\n");
      out.write("				event.preventDefault();\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		});  \r\n");
      out.write("		\r\n");
      out.write("	}  \r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div>\r\n");
      out.write("		\r\n");
      out.write("		<h1>회원 가입</h1>\r\n");
      out.write("		\r\n");
      out.write("		<div>* 표시는 필수 입력사항입니다.</div>\r\n");
      out.write("		\r\n");
      out.write("		<hr>\r\n");
      out.write("		\r\n");
      out.write("		<form id=\"frm_join\" action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/join\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("			<input type=\"hidden\" name=\"location\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${location}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			<input type=\"hidden\" name=\"promotion\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${promotion}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"id\">아이디*</label>\r\n");
      out.write("				<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("				<span id=\"msg_id\"></span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"pw\">패스워드*</label>\r\n");
      out.write("				<input type=\"password\" name=\"pw\" id=\"pw\">\r\n");
      out.write("				<span id=\"msg_pw\"></span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"re_pw\">패스워드 확인*</label>\r\n");
      out.write("				<input type=\"password\" id=\"re_pw\">\r\n");
      out.write("				<span id=\"msg_re_pw\"></span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"name\">이름*</label>\r\n");
      out.write("				<input type=\"text\" name=\"name\" id=\"name\">\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"none\">선택안함</label>\r\n");
      out.write("				<input type=\"radio\" name=\"gender\" id=\"none\" value=\"NO\" checked=\"checked\">\r\n");
      out.write("				<label for=\"male\">남자</label>\r\n");
      out.write("				<input type=\"radio\" name=\"gender\" id=\"male\" value=\"M\">\r\n");
      out.write("				<label for=\"female\">여자</label>\r\n");
      out.write("				<input type=\"radio\" name=\"gender\" id=\"female\" value=\"F\">\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"moblie\">휴대전화*</label>\r\n");
      out.write("				<input type=\"text\" name=\"mobile\" id=\"mobile\">\r\n");
      out.write("				<span id=\"msg_mobile\"></span>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"birthyear\">생년월일*</label>\r\n");
      out.write("				<select name=\"birthyear\" id=\"birthyear\"></select>\r\n");
      out.write("				<select name=\"birthmonth\" id=\"birthmonth\"></select>\r\n");
      out.write("				<select name=\"birthdate\" id=\"birthdate\"></select>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<input type=\"text\" onclick=\"fn_execDaumPostcode()\" name=\"postcode\" id=\"postcode\" placeholder=\"우편번호\" readonly=\"readonly\">\r\n");
      out.write("				<input type=\"button\" onclick=\"fn_execDaumPostcode()\" value=\"우편번호 찾기\"><br>\r\n");
      out.write("				<input type=\"text\" name=\"roadAddress\" id=\"roadAddress\" placeholder=\"도로명주소\"  readonly=\"readonly\">\r\n");
      out.write("				<input type=\"text\" name=\"jibunAddress\" id=\"jibunAddress\" placeholder=\"지번주소\"  readonly=\"readonly\"><br>\r\n");
      out.write("				<span id=\"guide\" style=\"color:#999;display:none\"></span>\r\n");
      out.write("				<input type=\"text\" name=\"detailAddress\" id=\"detailAddress\" placeholder=\"상세주소\">\r\n");
      out.write("				<input type=\"text\" name=\"extraAddress\" id=\"extraAddress\" placeholder=\"참고항목\" readonly=\"readonly\">\r\n");
      out.write("				<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("				<script>\r\n");
      out.write("				    //본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\r\n");
      out.write("				    function fn_execDaumPostcode() {\r\n");
      out.write("				        new daum.Postcode({\r\n");
      out.write("				            oncomplete: function(data) {\r\n");
      out.write("				                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("				\r\n");
      out.write("				                // 도로명 주소의 노출 규칙에 따라 주소를 표시한다.\r\n");
      out.write("				                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("				                var roadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("				                var extraRoadAddr = ''; // 참고 항목 변수\r\n");
      out.write("				\r\n");
      out.write("				                // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("				                // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("				                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("				                    extraRoadAddr += data.bname;\r\n");
      out.write("				                }\r\n");
      out.write("				                // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("				                if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("				                   extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("				                }\r\n");
      out.write("				                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("				                if(extraRoadAddr !== ''){\r\n");
      out.write("				                    extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("				                }\r\n");
      out.write("				\r\n");
      out.write("				                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("				                document.getElementById('postcode').value = data.zonecode;\r\n");
      out.write("				                document.getElementById(\"roadAddress\").value = roadAddr;\r\n");
      out.write("				                document.getElementById(\"jibunAddress\").value = data.jibunAddress;\r\n");
      out.write("				                \r\n");
      out.write("				                // 참고항목 문자열이 있을 경우 해당 필드에 넣는다.\r\n");
      out.write("				                if(roadAddr !== ''){\r\n");
      out.write("				                    document.getElementById(\"extraAddress\").value = extraRoadAddr;\r\n");
      out.write("				                } else {\r\n");
      out.write("				                    document.getElementById(\"extraAddress\").value = '';\r\n");
      out.write("				                }\r\n");
      out.write("				\r\n");
      out.write("				                var guideTextBox = document.getElementById(\"guide\");\r\n");
      out.write("				                // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("				                if(data.autoRoadAddress) {\r\n");
      out.write("				                    var expRoadAddr = data.autoRoadAddress + extraRoadAddr;\r\n");
      out.write("				                    guideTextBox.innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';\r\n");
      out.write("				                    guideTextBox.style.display = 'block';\r\n");
      out.write("				\r\n");
      out.write("				                } else if(data.autoJibunAddress) {\r\n");
      out.write("				                    var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("				                    guideTextBox.innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';\r\n");
      out.write("				                    guideTextBox.style.display = 'block';\r\n");
      out.write("				                } else {\r\n");
      out.write("				                    guideTextBox.innerHTML = '';\r\n");
      out.write("				                    guideTextBox.style.display = 'none';\r\n");
      out.write("				                }\r\n");
      out.write("				            }\r\n");
      out.write("				        }).open();\r\n");
      out.write("				    }\r\n");
      out.write("				</script>\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<label for=\"email\">이메일*</label>\r\n");
      out.write("				<input type=\"text\" name=\"email\" id=\"email\">\r\n");
      out.write("				<input type=\"button\" value=\"인증번호받기\" id=\"btn_getAuthCode\">\r\n");
      out.write("				<span id=\"msg_email\"></span><br>\r\n");
      out.write("				<input type=\"text\" id=\"authCode\" placeholder=\"인증코드 입력\">\r\n");
      out.write("				<input type=\"button\" value=\"인증하기\" id=\"btn_verifyAuthCode\">\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("			<div>\r\n");
      out.write("				<button>가입하기</button>\r\n");
      out.write("				<input type=\"button\" value=\"취소하기\" onclick=\"history.go(-2)\">\r\n");
      out.write("			</div>\r\n");
      out.write("			\r\n");
      out.write("		</form>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/user/join.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/user/join.jsp(4,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/user/join.jsp(4,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
